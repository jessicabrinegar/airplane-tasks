import airplane from "airplane";
import axios from "axios";
import axiosRetry from "axios-retry";
import { request } from "http";
import { v4 as uuidv4 } from "uuid";

export default airplane.task(
  {
    slug: "create_new_addi_admin_jb",
    name: "Create New ADDI Admin Tool",
    description:
      "Given an ADDI deployment type, name, and email, this tool creates a new admin user for the given addi site. Github: n/a",
    runtime: "standard",
    resources: ["postgres_dev_organizations", "postgres_prod_orgs"],
    timeout: 43200,
    envVars: {
      ECG_API_KEY: { config: "ECG_API_KEY" },
    },
    parameters: {
      addi_type: {
        name: "Addi Deployment Type",
        type: "shorttext",
        options: [
          { label: "Prod", value: "https://orgs.ecg-api.com" },
          { label: "Dev", value: "https://orgs-dev.ecg-api.com" },
        ],
        default: "https://orgs.ecg-api.com",
        required: true,
      },
      first_name: {
        name: "First Name",
        type: "shorttext",
        required: true,
      },
      last_name: {
        name: "Last Name",
        type: "shorttext",
        required: true,
      },
      email: {
        name: "Email",
        type: "shorttext",
        required: true,
      },
    },
  },
  async (params) => {
    const url = params.addi_type;
    const first_name = params.first_name;
    const last_name = params.last_name;
    const email = params.email;

    const legacyIdentifier = uuidv4().toString();

    type AxiosInput = {
      policies: string[];
      person: {
        salutation: number;
        firstName: string;
        lastName: string;
        suffix: string;
        contactEmailAddress: string;
      };
      account: {
        email: string;
        password: string;
        isAutoGenerated: boolean;
      };
      addresses: any[];
      phoneNumbers: any[];
    };

    const requestBody = {
      "policies": ["e7b7fa34-a652-493b-96d5-3637b1dabb73"],
      "person": {
        "salutation": 1,
        "firstName": first_name,
        "lastName": last_name,
        "suffix": "",
        "contactEmailAddress": email,
      },
      "account": {
        "email": email,
        "password": "",
        "isAutoGenerated": true,
      },
      "addresses": [],
      "phoneNumbers": [],
    };

    const axiosCallToCreateUser = async (requestBody: AxiosInput) => {
      // const output: AxiosResponse[] = []
      const URL = `${url}/api/ecg-admins`;
      const CONFIG = {
        headers: {
          "Content-Type": "application/json",
          "Authorization":
            "Bearer eyJraWQiOiJqOHRlZ2hzRXRRdWlzeTJWZHZ3ZndOMVpvbkNxWU5sb1dncGVIUUdMR2xJPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiJkMDdjMTk3YS0xNjJiLTRlMjQtYjg4OS1hMzE2NmY0MWNkZWYiLCJ0b2tlbl91c2UiOiJhY2Nlc3MiLCJzY29wZSI6ImF3cy5jb2duaXRvLnNpZ25pbi51c2VyLmFkbWluIHBob25lIG9wZW5pZCBwcm9maWxlIGVtYWlsIiwiYXV0aF90aW1lIjoxNjg4NjYwMDA3LCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9OaGs5VHJmaE8iLCJleHAiOjE2ODg2NjM2MDcsImlhdCI6MTY4ODY2MDAwNywidmVyc2lvbiI6MiwianRpIjoiY2IxNmRjNjMtOTYxNC00MGNmLThlNzItY2E3NDBkYWQyMjA3IiwiY2xpZW50X2lkIjoiNmVmZGIwMDg5Y2g4NGxyZ3YxZ2lpZjVnOGMiLCJ1c2VybmFtZSI6ImQwN2MxOTdhLTE2MmItNGUyNC1iODg5LWEzMTY2ZjQxY2RlZiJ9.iiH4_MT88ExKyZHWPgjUjljbntJT7_E9_wOwowbuDFAdB3aHRweNiUtysA3Q2oRHkWO1SZQjJpJsVwJsE7Y6YTvOERWQf4YQM_FuWQxLnCAhvmctj3Rv1AFbUDylz8FEQo5QlCCZ3DbwSac0CuedjnoNEDVZcposBBAihDKSeWDY0DEj26QbR4aJXqj96nnoDdn74T5USNJnuYRIFMRafGUReDhVZMxdJRrlXJ3LTQS5xi6NiUZG8hiAgRxShzTohjOx2ZpPksUBd8ZLQq3mR5FfxREqVZT217oMtBUi4-BK3CEMILdTeoXQK-G2LVkRPg-vui0ZZYkcCVFr_qs4Mg",
        },
      };
      const data = requestBody;

      // Retry support
      axiosRetry(axios, {
        retries: 3,
        retryDelay: axiosRetry.exponentialDelay,
      });

      try {
        const response = await axios.post(URL, data, CONFIG);

        if (response.status === 200 || response.status === 201) {
          return response;
        } else {
          return console.log("Error Call: ", response.statusText);
        }
      } catch (err) {
        return console.log(err);
      }
    };
    const result = await axiosCallToCreateUser(requestBody);
    return result;
  }
);
